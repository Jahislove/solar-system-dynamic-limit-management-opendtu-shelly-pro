/*
  DYNAMIC LIMIT MANAGEMENT / BASIC
  Shelly Pro 3EM & OpenDTU
  06.08.2023, GF78
  22/08/2025, Jahislove, adapting for pro3EM in single phase mode and multiple inverters
  23/08/2025, adding 3 phases mode
*/
// shelly pro 3EM https://shelly-api-docs.shelly.cloud/gen2/Devices/Gen2/ShellyPro3EM/

// CONFIG
let DTU_IP = "192.168.0.168";
let DTU_LOGIN = "admin";
let DTU_PWD = "password";
let NUMBER_INVERTER = 3; // number of inverter
let EM = "EM1" // shelly mode : single phase mode => EM1 , 3 phases mode => EM 
let PHASE = 2; //  single phase : clamp used for grid power  => 0 = clamp A, 1 = clamp B , 2 = clamp C / 3 phases mode => 0 = total
let GRID = 0; // feed target (in watt) ,ex -800 if you want to export 800w , 0 for zero export
let INTERVAL = 5; // interval between measure (sec)
let LIMIT_MIN = 100; // power limit min for inverter
let LIMIT_MAX = 1000; // power limit max for inverter
let LIMIT_STEP_MIN = 10; // min / max step to modify limit
let LIMIT_STEP_MAX = 100;
let LIMIT_ROUND = 10; //if power variation is under this value : no limit modification

// nothing to modify below
Timer.set((INTERVAL || 60) * 1000, true,
	function () {
	    print("-------------------------------------------------------------------");
		Shelly.call('HTTP.GET', { url: "http://" + DTU_LOGIN + ":" + DTU_PWD + "@" + DTU_IP + "/api/livedata/status", timeout: 15, ssl_ca: "*" },
			function(result) {
				if (result.code !== 200) {  // check DTU reachable
					print("ERROR: No DTU data.");
					return;				
				}
				let dtu = JSON.parse(result.body); // check inverter reachable
				if (dtu.inverters[0].reachable == false) {
					print("ERROR: Inverter is not reachable.");
					return;
				}
				let dtu_limit = Math.round(dtu.inverters[0].limit_absolute); // get actual limit of inverter 0 (one inverter is enough as all inverter have same value)
				print("actual inverters limit : " + dtu_limit);
				
				// Shelly EM/EM1
				let shelly = Shelly.getComponentStatus(EM, PHASE );	
				print("grid power : " + shelly.act_power);
				if (!shelly || typeof shelly !== "object" || typeof shelly["act_power"] !== "number") {
					print("ERROR: shelly power unkown");
					return;
				} 
				let shelly_power = Math.round(shelly["act_power"] || 0);

				// Limit
				let limit = dtu_limit + shelly_power - GRID;
				limit = (Math.abs(dtu_limit - limit) < LIMIT_STEP_MIN) ? dtu_limit : limit;
				limit = (Math.abs(dtu_limit - limit) > LIMIT_STEP_MAX) 
						? (limit > dtu_limit) ? dtu_limit + LIMIT_STEP_MAX : dtu_limit - LIMIT_STEP_MAX
						: limit;
				limit = Math.min(limit, LIMIT_MAX);
				limit = Math.max(limit, LIMIT_MIN, 0); 
				limit = Math.round(limit / LIMIT_ROUND || 1, 0) * ( LIMIT_ROUND || 1);	
				print("new limit : " + limit);
				if(limit ===  (Math.round(dtu_limit / (LIMIT_ROUND || 1)) * ( LIMIT_ROUND || 1))) {
					print("INFO: No limit adjustment required.");
					return;
				}
				for (let i = 0; i < NUMBER_INVERTER; i++) { 
				    (function(index) {
						 Shelly.call(
							'HTTP.POST', {
								url: "http://admin:" + DTU_PWD + "@" + DTU_IP + "/api/limit/config",
								body: "data={\"serial\":\"" +  dtu.inverters[index].serial + "\",\"limit_type\":0,\"limit_value\":" + limit + "}",
								content_type: "application/x-www-form-urlencoded",
								ssl_ca: "*",
								timeout: 15
							},
							function(result) { // callback
								//print(result);
								let body = JSON.parse(result.body);
								//print(body);
								//print(body.code);		
								if ( body.code !== 1001) {
									print("ERROR: Limit not set : " + body.type + " : " + body.message);
									return;				
								}
								print("inverter " + index + " answer : " + body.type + " , " + body.message + " New limit " + limit);	
								return;				
							}
						);
				    })(i);
				}
			}
		);
	}
);
